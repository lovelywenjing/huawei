//排序算法 
#include<iostream> 
using namespace std;
//直接插入排序法
void insertSort(int *arr,int length)
{
	for(int i=2;i<=length;i++)
	{
		if(arr[i]<arr[i-1])
		{
			arr[0]=arr[i];
			arr[i]=arr[i-1];
			int j;
			for(j=i-2;arr[0]<arr[j];--j)
			{
				arr[j+1]=arr[j];
			}
			arr[j+1]=arr[0];
		}
	}
}

//希尔排序
void ShellInsert(int *arr,int length,int dk)
{
	for(int i=dk+1;i<=length;++i)
	{
		if(arr[i]<arr[i-dk])
		{
			arr[0]=arr[i];
			int j;
			for(j=i-dk;j>0&&arr[j]>arr[0];j-=dk)
				arr[j+dk]=arr[j];
			arr[j+dk]=arr[0];
		}
	}
} 
void ShellSort(int *arr,int length,int *gap,int t)
{
	for(int n=t-1;n>=0;--n)
	{
		ShellInsert(arr,length, gap[n]);
	}
}
void shellSort(int a[],int length)
{
	int gap[] = {1,2,3,5,7,13,17};
	ShellSort(a,length,gap,7);
}

//快速排序
int Partition(int *arr,int low,int high)
{
	arr[0]=arr[low];
	int pivotkey=arr[low];
	int temp;
	while(low<high)
	{
		while(low<high&&arr[high]>=pivotkey) --high;
		temp=arr[high];
		arr[high]=arr[low];
		arr[low]=temp;
		while(low<high&&arr[low]<=pivotkey) ++low;
		temp=arr[high];
		arr[high]=arr[low];
		arr[low]=temp;
	}
	arr[low]=arr[0];
	return low;
} 
void _QuickSort(int *arr,int low,int high)
{
	int pivot_loc;
	if(low<high)
	{
		pivot_loc=Partition(arr,low,high);
		_QuickSort(arr,low,pivot_loc-1);
		_QuickSort(arr,pivot_loc+1,high);
	}
}
void QuickSort(int *arr,int length)
{
	_QuickSort(arr,1,length);
}
//冒泡排序
void BubbleSort(int *arr,int length)
{
	int temp;
	for(int i=0;i<length;i++)
	  for(int j=0;j<length-i-1;j++)
	  {
  		if(arr[j]>arr[j+1])
  		{
		  	temp=arr[j+1];
		  	arr[j+1]=arr[j];
		  	arr[j]=temp;
		  }
  	}
} 
//选择排序
/*
void SimpleSelectionSort(int a[],int length)
{
	int minnum=0,i=0,j=0,temp=0;
	for(i=0;i<length-1;i++)
	{minnum=i;
	for(j=i;j<length;j++)
	{
		if(a[j]<a[minnum])
			minnum=j;
	}
	temp=a[i];
	a[i]=a[minnum];
	a[minnum]=temp;
	}
}*/

void SimpleSelectSort(int arr[],int length)
{
	int minKey=0,n=0;
	int temp;
	for(int i=1;i<length;i++)
	{
		minKey=i;
		for(n=i;n<=length;n++)
		if(arr[n]<arr[minKey])
			minKey=n;
	    temp=arr[minKey];
		arr[minKey]=arr[i];
		arr[i]=temp;
	}
}
//归并排序
void Merge(int array[], int first, int mid, int last)
{
	int i, j = 0;
	int begin1 = first, end1 = mid, begin2 = mid + 1, end2 = last;
	int *temp = (int *)malloc((last - first + 1) * sizeof(int));
	if (!temp)
	{
		fprintf(stderr, "\n 内存分配失败，程序将强制退出！\n");
		getchar();
		exit(1);
	}
	while (begin1 <= end1 && begin2 <= end2)
	{
		if (array[begin1] < array[begin2])
		{
			temp[j++] = array[begin1]; begin1++;
		}
		else
		{
			temp[j++] = array[begin2]; begin2++;
		}
	}
	while (begin1 <= end1)
	{
		temp[j++] = array[begin1++];
	}
	while(begin2 <= end2)
	{
		temp[j++] = array[begin2++];
	}
	for (i = 0; i < (last - first + 1); i++)
	{
		array[first + i] = temp[i];
	}
	free(temp);
}

void _MergeSort(int *array, int first, int last)
{
	int mid;
	if (first < last)
	{
		mid = (first + last) / 2;
		_MergeSort(array, first, mid);
		_MergeSort(array, mid + 1, last);
		Merge(array, first, mid, last);
	}
}

void MergeSort(int *array, int length)
{
	_MergeSort(array, 0, length - 1);
}
int main()
{
	int arr[8]={49,38,65,97,76,13,27,49};
	//int arr[9]={0,49,38,65,97,76,13,27,49}
	//insertSort(arr,9);
	//shellSort(arr,9);
	//BubbleSort(arr,9);
	//QuickSort(arr,9);
	//SimpleSelectSort(arr,9);
	MergeSort(arr,8);
	for(int n=1;n<=8;n++)
	cout<<arr[n]<<" ";
	cout<<endl;
	return 0;
}

